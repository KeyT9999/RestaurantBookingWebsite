-- =====================================================
-- FIX TRIGGER: create_default_payment_for_booking
-- =====================================================
-- Mục đích: Sửa trigger để generate order_code khi auto-create payment
-- =====================================================

BEGIN;

-- =====================================================
-- BƯỚC 1: DROP trigger và function cũ
-- =====================================================
DROP TRIGGER IF EXISTS trigger_create_default_payment ON booking;
DROP FUNCTION IF EXISTS create_default_payment_for_booking() CASCADE;

-- =====================================================
-- BƯỚC 2: Tạo function MỚI với logic generate order_code
-- =====================================================
CREATE OR REPLACE FUNCTION create_default_payment_for_booking()
RETURNS TRIGGER AS $$
DECLARE
    v_order_code BIGINT;
    v_timestamp BIGINT;
BEGIN
    -- Generate order_code: bookingId * 1000000 + timestamp % 1000000
    -- Logic giống với Java: PaymentService.generateUniqueOrderCode()
    v_timestamp := EXTRACT(EPOCH FROM NOW())::BIGINT * 1000; -- milliseconds
    v_order_code := NEW.booking_id * 1000000 + (v_timestamp % 1000000);
    
    -- Check uniqueness (tránh duplicate)
    WHILE EXISTS (SELECT 1 FROM payment WHERE order_code = v_order_code) LOOP
        v_order_code := v_order_code + 1;
    END LOOP;
    
    -- Insert payment với order_code
    -- Nếu deposit_amount = 0, set default minimum là 10,000 VNĐ
    INSERT INTO payment (
        booking_id,
        customer_id,
        amount,
        payment_method,
        status,
        paid_at,
        payment_type,
        order_code  -- ✅ THÊM order_code!
    )
    VALUES (
        NEW.booking_id,
        NEW.customer_id,
        GREATEST(COALESCE(NEW.deposit_amount, 10000), 10000),  -- ✅ Minimum 10,000 VNĐ
        'PAYOS',
        'PENDING',
        NOW(),
        'DEPOSIT',
        v_order_code  -- ✅ SET order_code!
    )
    ON CONFLICT (booking_id, payment_type) DO NOTHING;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- =====================================================
-- BƯỚC 3: Tạo trigger MỚI
-- =====================================================
CREATE TRIGGER trigger_create_default_payment
    AFTER INSERT ON booking
    FOR EACH ROW
    EXECUTE FUNCTION create_default_payment_for_booking();

-- =====================================================
-- BƯỚC 4: Update existing payments with NULL order_code
-- =====================================================
UPDATE payment 
SET order_code = payment_id * 1000000 + EXTRACT(EPOCH FROM paid_at)::BIGINT % 1000000 
WHERE order_code IS NULL;

-- =====================================================
-- BƯỚC 5: Make order_code NOT NULL constraint
-- =====================================================
-- Sau khi update xong, set constraint NOT NULL
ALTER TABLE payment 
    ALTER COLUMN order_code SET NOT NULL;

-- Thêm unique constraint
ALTER TABLE payment 
    DROP CONSTRAINT IF EXISTS payment_order_code_key;
    
ALTER TABLE payment 
    ADD CONSTRAINT payment_order_code_key UNIQUE (order_code);

-- Thêm index cho performance
CREATE INDEX IF NOT EXISTS idx_payment_order_code ON payment(order_code);

COMMENT ON COLUMN payment.order_code IS 
    'Unique order code for payment tracking. Auto-generated by trigger. Format: bookingId*1000000 + timestamp%1000000';

COMMIT;

-- =====================================================
-- VERIFICATION QUERIES (optional)
-- =====================================================
-- Kiểm tra trigger đã được tạo
-- SELECT * FROM pg_trigger WHERE tgname = 'trigger_create_default_payment';

-- Kiểm tra function
-- SELECT proname, prosrc FROM pg_proc WHERE proname = 'create_default_payment_for_booking';

-- Test tạo booking mới
-- INSERT INTO booking (customer_id, booking_time, number_of_guests, restaurant_id, status, deposit_amount)
-- VALUES ('customer_uuid_here', NOW() + INTERVAL '1 day', 4, 17, 'pending', 50000);

-- Kiểm tra payment auto-created có order_code
-- SELECT * FROM payment ORDER BY payment_id DESC LIMIT 1;

