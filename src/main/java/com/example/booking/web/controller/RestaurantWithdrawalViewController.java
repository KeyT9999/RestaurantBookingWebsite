package com.example.booking.web.controller;

import java.security.Principal;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Pageable;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.booking.common.enums.WithdrawalStatus;
import com.example.booking.dto.payout.CreateWithdrawalRequestDto;
import com.example.booking.dto.payout.RestaurantBalanceDto;
import com.example.booking.dto.payout.RestaurantBankAccountDto;
import com.example.booking.dto.payout.WithdrawalRequestDto;
import com.example.booking.repository.RestaurantProfileRepository;
import com.example.booking.service.RestaurantBalanceService;
import com.example.booking.service.RestaurantBankAccountService;
import com.example.booking.service.WithdrawalService;

/**
 * Controller ƒë·ªÉ serve HTML pages cho restaurant withdrawal management
 */
@Controller
@RequestMapping("/restaurant-owner/withdrawal")
@PreAuthorize("hasRole('RESTAURANT_OWNER')")
public class RestaurantWithdrawalViewController {
    
    private static final Logger logger = LoggerFactory.getLogger(RestaurantWithdrawalViewController.class);
    
    private final RestaurantBalanceService balanceService;
    private final RestaurantBankAccountService bankAccountService;
    private final WithdrawalService withdrawalService;
    private final RestaurantProfileRepository restaurantRepository;
    
    public RestaurantWithdrawalViewController(
        RestaurantBalanceService balanceService,
        RestaurantBankAccountService bankAccountService,
        WithdrawalService withdrawalService,
        RestaurantProfileRepository restaurantRepository
    ) {
        this.balanceService = balanceService;
        this.bankAccountService = bankAccountService;
        this.withdrawalService = withdrawalService;
        this.restaurantRepository = restaurantRepository;
    }
    
    /**
     * Hi·ªÉn th·ªã trang qu·∫£n l√Ω withdrawal c·ªßa restaurant
     * GET /restaurant-owner/withdrawal
     */
    @GetMapping
    public String withdrawalManagement(
        @RequestParam(required = false) String status,
        Principal principal,
        Model model
    ) {
        try {
            // L·∫•y restaurant ID
            Integer restaurantId = getRestaurantId(principal);
            logger.info("üè™ Restaurant owner {} accessing withdrawal page", restaurantId);
            
            // L·∫•y th√¥ng tin nh√† h√†ng
            var restaurant = restaurantRepository.findById(restaurantId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y nh√† h√†ng"));
            model.addAttribute("restaurantName", restaurant.getRestaurantName());
            
            // L·∫•y s·ªë d∆∞
            RestaurantBalanceDto balance = balanceService.getBalance(restaurantId);
            model.addAttribute("balance", balance);
            logger.debug("üí∞ Restaurant {} balance: {} VNƒê", restaurantId, balance.getAvailableBalance());
            
            // L·∫•y danh s√°ch t√†i kho·∫£n ng√¢n h√†ng
            List<RestaurantBankAccountDto> bankAccounts = bankAccountService.getBankAccounts(restaurantId);
            model.addAttribute("bankAccounts", bankAccounts);
            logger.debug("üè¶ Restaurant {} has {} bank accounts", restaurantId, bankAccounts.size());
            
            // L·∫•y l·ªãch s·ª≠ withdrawal
            List<WithdrawalRequestDto> withdrawals;
            if (status != null && !status.isEmpty() && !status.equals("ALL")) {
                WithdrawalStatus withdrawalStatus = WithdrawalStatus.valueOf(status);
                withdrawals = withdrawalService.getWithdrawalsByStatus(withdrawalStatus)
                    .stream()
                    .filter(w -> w.getRestaurantId().equals(restaurantId))
                    .collect(java.util.stream.Collectors.toList());
                model.addAttribute("filter", status);
            } else {
                withdrawals = withdrawalService.getAllWithdrawals(Pageable.unpaged()).getContent()
                    .stream()
                    .filter(w -> w.getRestaurantId().equals(restaurantId))
                    .collect(java.util.stream.Collectors.toList());
                model.addAttribute("filter", "ALL");
            }
            
            model.addAttribute("withdrawals", withdrawals);
            logger.debug("üìú Restaurant {} has {} withdrawal requests", restaurantId, withdrawals.size());
            
            return "restaurant-owner/withdrawal-management";
            
        } catch (Exception e) {
            logger.error("‚ùå Error loading withdrawal page for restaurant", e);
            model.addAttribute("error", "L·ªói khi t·∫£i d·ªØ li·ªáu: " + e.getMessage());
            // Return with empty data to avoid template errors
            model.addAttribute("balance", createEmptyBalance());
            model.addAttribute("bankAccounts", new ArrayList<>());
            model.addAttribute("withdrawals", new ArrayList<>());
            model.addAttribute("filter", "ALL");
            return "restaurant-owner/withdrawal-management";
        }
    }
    
    /**
     * T·∫°o y√™u c·∫ßu r√∫t ti·ªÅn
     * POST /restaurant-owner/withdrawal/request
     */
    @PostMapping("/request")
    public String createWithdrawalRequest(
        @RequestParam String amount,
        @RequestParam Integer bankAccountId,
        @RequestParam(required = false) String description,
        Principal principal,
        RedirectAttributes redirectAttributes
    ) {
        try {
            Integer restaurantId = getRestaurantId(principal);
            logger.info("üí∏ Restaurant {} creating withdrawal request for {} VNƒê", restaurantId, amount);
            
            // T·∫°o DTO
            CreateWithdrawalRequestDto dto = new CreateWithdrawalRequestDto();
            dto.setAmount(new java.math.BigDecimal(amount));
            dto.setBankAccountId(bankAccountId);
            dto.setDescription(description != null && !description.trim().isEmpty() 
                ? description 
                : "R√∫t ti·ªÅn v·ªÅ t√†i kho·∫£n ng√¢n h√†ng");
            
            // T·∫°o withdrawal request
            WithdrawalRequestDto result = withdrawalService.createWithdrawal(restaurantId, dto);
            
            redirectAttributes.addFlashAttribute("success", 
                "ƒê√£ t·∫°o y√™u c·∫ßu r√∫t ti·ªÅn #" + result.getRequestId() + " th√†nh c√¥ng! Vui l√≤ng ch·ªù admin duy·ªát.");
            logger.info("‚úÖ Created withdrawal request #{} for restaurant {}", result.getRequestId(), restaurantId);
            
        } catch (Exception e) {
            logger.error("‚ùå Error creating withdrawal request for restaurant", e);
            redirectAttributes.addFlashAttribute("error", "L·ªói khi t·∫°o y√™u c·∫ßu r√∫t ti·ªÅn: " + e.getMessage());
        }
        
        return "redirect:/restaurant-owner/withdrawal";
    }
    
    /**
     * Force fix balance t·ª´ withdrawal requests th·ª±c t·∫ø
     * GET /restaurant-owner/withdrawal/fix-balance
     */
    @GetMapping("/fix-balance")
    public String fixBalance(Principal principal, RedirectAttributes redirectAttributes) {
        try {
            Integer restaurantId = getRestaurantId(principal);
            logger.info("üîß Force fixing balance for restaurant {}", restaurantId);
            
            // G·ªçi method fix balance t·ª´ withdrawal requests
            balanceService.fixBalanceFromWithdrawals(restaurantId);
            
            redirectAttributes.addFlashAttribute("success", "ƒê√£ s·ª≠a l·∫°i s·ªë d∆∞ t·ª´ d·ªØ li·ªáu th·ª±c t·∫ø!");
            logger.info("‚úÖ Fixed balance for restaurant {}", restaurantId);
            
        } catch (Exception e) {
            logger.error("‚ùå Error fixing balance", e);
            redirectAttributes.addFlashAttribute("error", "L·ªói khi s·ª≠a s·ªë d∆∞: " + e.getMessage());
        }
        
        return "redirect:/restaurant-owner/withdrawal";
    }
    
    /**
     * Force recalculate balance t·ª´ database
     * GET /restaurant-owner/withdrawal/recalculate-balance
     */
    @GetMapping("/recalculate-balance")
    public String recalculateBalance(Principal principal, RedirectAttributes redirectAttributes) {
        try {
            Integer restaurantId = getRestaurantId(principal);
            logger.info("üîÑ Force recalculating balance for restaurant {}", restaurantId);
            
            // G·ªçi database function ƒë·ªÉ recalculate
            balanceService.recalculateAll();
            
            redirectAttributes.addFlashAttribute("success", "ƒê√£ c·∫≠p nh·∫≠t l·∫°i s·ªë d∆∞ t·ª´ database!");
            logger.info("‚úÖ Recalculated balance for restaurant {}", restaurantId);
            
        } catch (Exception e) {
            logger.error("‚ùå Error recalculating balance", e);
            redirectAttributes.addFlashAttribute("error", "L·ªói khi c·∫≠p nh·∫≠t s·ªë d∆∞: " + e.getMessage());
        }
        
        return "redirect:/restaurant-owner/withdrawal";
    }
    
    /**
     * Th√™m t√†i kho·∫£n ng√¢n h√†ng
     * POST /restaurant-owner/bank-accounts
     */
    @PostMapping("/bank-accounts")
    public String addBankAccount(
        @RequestParam String bankCode,
        @RequestParam String accountNumber,
        @RequestParam String accountHolderName,
        @RequestParam(required = false) Boolean isDefault,
        Principal principal,
        RedirectAttributes redirectAttributes
    ) {
        try {
            Integer restaurantId = getRestaurantId(principal);
            logger.info("üè¶ Restaurant {} adding bank account: {}", restaurantId, accountNumber);
            
            // T·∫°o DTO
            RestaurantBankAccountDto dto = new RestaurantBankAccountDto();
            dto.setBankCode(bankCode);
            dto.setAccountNumber(accountNumber);
            dto.setAccountHolderName(accountHolderName.toUpperCase().trim());
            dto.setIsDefault(isDefault != null ? isDefault : false);
            
            // Th√™m t√†i kho·∫£n
            RestaurantBankAccountDto result = bankAccountService.addBankAccount(restaurantId, dto);
            
            redirectAttributes.addFlashAttribute("success", 
                "ƒê√£ th√™m t√†i kho·∫£n ng√¢n h√†ng " + result.getBankName() + " - " + result.getAccountNumber() + " th√†nh c√¥ng!");
            logger.info("‚úÖ Added bank account #{} for restaurant {}", result.getAccountId(), restaurantId);
            
        } catch (Exception e) {
            logger.error("‚ùå Error adding bank account for restaurant", e);
            redirectAttributes.addFlashAttribute("error", "L·ªói khi th√™m t√†i kho·∫£n ng√¢n h√†ng: " + e.getMessage());
        }
        
        return "redirect:/restaurant-owner/withdrawal#bank-accounts";
    }
    
    /**
     * Helper method to get restaurant ID from principal
     */
    private Integer getRestaurantId(Principal principal) {
        String username = principal.getName(); // This returns username, not UUID
        return restaurantRepository.findByOwnerUsername(username)
            .stream()
            .findFirst()
            .map(r -> r.getRestaurantId())
            .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y nh√† h√†ng v·ªõi t√†i kho·∫£n: " + username));
    }
    
    /**
     * Create empty balance DTO for error handling
     */
    private RestaurantBalanceDto createEmptyBalance() {
        RestaurantBalanceDto dto = new RestaurantBalanceDto();
        dto.setAvailableBalance(java.math.BigDecimal.ZERO);
        dto.setTotalRevenue(java.math.BigDecimal.ZERO);
        dto.setTotalWithdrawn(java.math.BigDecimal.ZERO);
        dto.setPendingWithdrawal(java.math.BigDecimal.ZERO);
        dto.setTotalCommission(java.math.BigDecimal.ZERO);
        dto.setTotalBookingsCompleted(0);
        return dto;
    }
}
