package com.example.booking.scheduler;

import com.example.booking.domain.Payment;
import com.example.booking.domain.PaymentStatus;
import com.example.booking.repository.PaymentRepository;
import com.example.booking.service.PayOsService;
import com.example.booking.service.PaymentLedgerService;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;

/**
 * Scheduler ƒë·ªÉ ƒë·ªëi so√°t d·ªØ li·ªáu v·ªõi PayOS
 * Ch·∫°y h√†ng ng√†y ƒë·ªÉ ki·ªÉm tra v√† ƒë·ªìng b·ªô d·ªØ li·ªáu thanh to√°n
 */
@Component
public class PayOSReconciliationScheduler {
    
    private static final Logger logger = LoggerFactory.getLogger(PayOSReconciliationScheduler.class);
    
    @Autowired
    private PaymentRepository paymentRepository;
    
    @Autowired
    private PayOsService payOsService;
    
    @Autowired
    private PaymentLedgerService paymentLedgerService;
    
    /**
     * ƒê·ªëi so√°t d·ªØ li·ªáu PayOS h√†ng ng√†y
     * Ch·∫°y l√∫c 2:00 AM m·ªói ng√†y
     */
    @Scheduled(cron = "0 0 2 * * *")
    @Transactional
    public void dailyPayOSReconciliation() {
        logger.info("üîÑ Starting daily PayOS reconciliation process...");
        
        try {
            LocalDate reconciliationDate = LocalDate.now().minusDays(1); // ƒê·ªëi so√°t ng√†y h√¥m qua
            
            // 1. L·∫•y t·∫•t c·∫£ payments PayOS trong ng√†y c·∫ßn ƒë·ªëi so√°t
            List<Payment> payosPayments = getPayOSPaymentsForDate(reconciliationDate);
            
            logger.info("üìä Found {} PayOS payments for reconciliation date: {}", 
                       payosPayments.size(), reconciliationDate);
            
            // 2. T·∫°o reconciliation log
            Long reconciliationLogId = paymentLedgerService.createReconciliationLog(
                reconciliationDate, "PAYOS", payosPayments.size()
            );
            
            int matchedCount = 0;
            int unmatchedCount = 0;
            int discrepancyCount = 0;
            
            // 3. ƒê·ªëi so√°t t·ª´ng payment
            for (Payment payment : payosPayments) {
                try {
                    ReconciliationResult result = reconcilePaymentWithPayOS(payment);
                    
                    // 4. L∆∞u k·∫øt qu·∫£ ƒë·ªëi so√°t
                    paymentLedgerService.createReconciliationDetail(
                        reconciliationLogId, payment, result
                    );
                    
                    // 5. C·∫≠p nh·∫≠t tr·∫°ng th√°i payment n·∫øu c·∫ßn
                    if (result.getStatus() == ReconciliationStatus.MATCHED) {
                        matchedCount++;
                        updatePaymentStatusIfNeeded(payment, result);
                    } else if (result.getStatus() == ReconciliationStatus.UNMATCHED) {
                        unmatchedCount++;
                        logger.warn("‚ö†Ô∏è Unmatched payment: PaymentId={}, OrderCode={}", 
                                   payment.getPaymentId(), payment.getOrderCode());
                    } else if (result.getStatus() == ReconciliationStatus.DISCREPANCY) {
                        discrepancyCount++;
                        logger.error("‚ùå Payment discrepancy: PaymentId={}, OrderCode={}, Issue={}", 
                                   payment.getPaymentId(), payment.getOrderCode(), result.getDiscrepancyType());
                    }
                    
                } catch (Exception e) {
                    logger.error("‚ùå Error reconciling payment: PaymentId={}, OrderCode={}", 
                               payment.getPaymentId(), payment.getOrderCode(), e);
                    discrepancyCount++;
                }
            }
            
            // 6. C·∫≠p nh·∫≠t reconciliation log
            paymentLedgerService.updateReconciliationLog(
                reconciliationLogId, matchedCount, unmatchedCount, discrepancyCount, 
                matchedCount == payosPayments.size() ? "SUCCESS" : "PARTIAL"
            );
            
            logger.info("‚úÖ PayOS reconciliation completed:");
            logger.info("   - Total payments: {}", payosPayments.size());
            logger.info("   - Matched: {}", matchedCount);
            logger.info("   - Unmatched: {}", unmatchedCount);
            logger.info("   - Discrepancies: {}", discrepancyCount);
            
        } catch (Exception e) {
            logger.error("‚ùå Error in daily PayOS reconciliation", e);
        }
    }
    
    /**
     * ƒê·ªëi so√°t d·ªØ li·ªáu PayOS theo gi·ªù (cho payments g·∫ßn ƒë√¢y)
     * Ch·∫°y m·ªói 30 ph√∫t
     */
    @Scheduled(fixedRate = 1800000) // 30 ph√∫t
    @Transactional
    public void hourlyPayOSReconciliation() {
        logger.info("üîÑ Starting hourly PayOS reconciliation for recent payments...");
        
        try {
            // L·∫•y payments PayOS trong 2 gi·ªù qua
            LocalDateTime fromTime = LocalDateTime.now().minusHours(2);
            List<Payment> recentPayments = paymentRepository.findRecentPayOSPayments(fromTime);
            
            logger.info("üìä Found {} recent PayOS payments for reconciliation", recentPayments.size());
            
            for (Payment payment : recentPayments) {
                try {
                    ReconciliationResult result = reconcilePaymentWithPayOS(payment);
                    
                    if (result.getStatus() != ReconciliationStatus.MATCHED) {
                        logger.warn("‚ö†Ô∏è Recent payment reconciliation issue: PaymentId={}, Status={}", 
                                   payment.getPaymentId(), result.getStatus());
                        
                        // C√≥ th·ªÉ g·ª≠i alert ho·∫∑c notification ·ªü ƒë√¢y
                        sendReconciliationAlert(payment, result);
                    }
                    
                } catch (Exception e) {
                    logger.error("‚ùå Error reconciling recent payment: PaymentId={}", 
                               payment.getPaymentId(), e);
                }
            }
            
        } catch (Exception e) {
            logger.error("‚ùå Error in hourly PayOS reconciliation", e);
        }
    }
    
    /**
     * ƒê·ªëi so√°t m·ªôt payment c·ª• th·ªÉ v·ªõi PayOS
     */
    private ReconciliationResult reconcilePaymentWithPayOS(Payment payment) {
        try {
            if (payment.getOrderCode() == null) {
                return new ReconciliationResult(
                    ReconciliationStatus.UNMATCHED, 
                    "MISSING_ORDER_CODE", 
                    "Payment missing orderCode"
                );
            }
            
            // G·ªçi PayOS API ƒë·ªÉ l·∫•y th√¥ng tin payment
            var payosInfo = payOsService.getPaymentInfo(payment.getOrderCode());
            
            if (payosInfo == null || payosInfo.getData() == null) {
                return new ReconciliationResult(
                    ReconciliationStatus.UNMATCHED, 
                    "PAYOS_NOT_FOUND", 
                    "Payment not found in PayOS"
                );
            }
            
            var payosData = payosInfo.getData();
            
            // So s√°nh amount
            if (!payment.getAmount().equals(payosData.getAmount())) {
                return new ReconciliationResult(
                    ReconciliationStatus.DISCREPANCY, 
                    "AMOUNT_MISMATCH", 
                    String.format("Amount mismatch: Internal=%s, PayOS=%s", 
                                payment.getAmount(), payosData.getAmount())
                );
            }
            
            // So s√°nh status
            String payosStatus = payosData.getStatus();
            PaymentStatus expectedStatus = mapPayOSStatusToInternal(payosStatus);
            
            if (payment.getStatus() != expectedStatus) {
                return new ReconciliationResult(
                    ReconciliationStatus.DISCREPANCY, 
                    "STATUS_MISMATCH", 
                    String.format("Status mismatch: Internal=%s, PayOS=%s", 
                                payment.getStatus(), payosStatus)
                );
            }
            
            return new ReconciliationResult(
                ReconciliationStatus.MATCHED, 
                null, 
                "Payment matches PayOS data"
            );
            
        } catch (Exception e) {
            logger.error("Error reconciling payment with PayOS: PaymentId={}", 
                       payment.getPaymentId(), e);
            return new ReconciliationResult(
                ReconciliationStatus.DISCREPANCY, 
                "RECONCILIATION_ERROR", 
                "Error during reconciliation: " + e.getMessage()
            );
        }
    }
    
    /**
     * L·∫•y danh s√°ch payments PayOS cho m·ªôt ng√†y c·ª• th·ªÉ
     */
    private List<Payment> getPayOSPaymentsForDate(LocalDate date) {
        return paymentRepository.findPayOSPaymentsByDate(date);
    }
    
    /**
     * C·∫≠p nh·∫≠t tr·∫°ng th√°i payment n·∫øu c·∫ßn
     */
    private void updatePaymentStatusIfNeeded(Payment payment, ReconciliationResult result) {
        // Logic ƒë·ªÉ c·∫≠p nh·∫≠t payment status d·ª±a tr√™n k·∫øt qu·∫£ ƒë·ªëi so√°t
        // V√≠ d·ª•: n·∫øu PayOS b√°o payment ƒë√£ completed nh∆∞ng internal v·∫´n pending
        // th√¨ c·∫≠p nh·∫≠t internal status
    }
    
    /**
     * G·ª≠i alert khi c√≥ v·∫•n ƒë·ªÅ ƒë·ªëi so√°t
     */
    private void sendReconciliationAlert(Payment payment, ReconciliationResult result) {
        // Logic ƒë·ªÉ g·ª≠i alert/notification
        // C√≥ th·ªÉ g·ª≠i email, Slack notification, etc.
        logger.warn("üö® Reconciliation Alert: PaymentId={}, Issue={}", 
                   payment.getPaymentId(), result.getDiscrepancyType());
    }
    
    /**
     * Map PayOS status sang internal PaymentStatus
     */
    private PaymentStatus mapPayOSStatusToInternal(String payosStatus) {
        return switch (payosStatus.toUpperCase()) {
            case "PAID" -> PaymentStatus.COMPLETED;
            case "CANCELLED" -> PaymentStatus.CANCELLED;
            case "PENDING" -> PaymentStatus.PENDING;
            default -> PaymentStatus.PENDING;
        };
    }
    
    /**
     * Inner class ƒë·ªÉ ch·ª©a k·∫øt qu·∫£ ƒë·ªëi so√°t
     */
    public static class ReconciliationResult {
        private final ReconciliationStatus status;
        private final String discrepancyType;
        private final String message;
        
        public ReconciliationResult(ReconciliationStatus status, String discrepancyType, String message) {
            this.status = status;
            this.discrepancyType = discrepancyType;
            this.message = message;
        }
        
        public ReconciliationStatus getStatus() { return status; }
        public String getDiscrepancyType() { return discrepancyType; }
        public String getMessage() { return message; }
    }
    
    /**
     * Enum cho tr·∫°ng th√°i ƒë·ªëi so√°t
     */
    public enum ReconciliationStatus {
        MATCHED,      // D·ªØ li·ªáu kh·ªõp
        UNMATCHED,    // Kh√¥ng t√¨m th·∫•y ho·∫∑c kh√¥ng kh·ªõp
        DISCREPANCY   // C√≥ s·ª± kh√°c bi·ªát
    }
}
