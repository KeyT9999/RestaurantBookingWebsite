package com.example.booking.service;

import java.time.LocalDateTime;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.booking.common.enums.BookingStatus;
import com.example.booking.common.enums.TableStatus;
import com.example.booking.domain.Booking;
import com.example.booking.domain.BookingTable;
import com.example.booking.domain.RestaurantTable;
import com.example.booking.repository.BookingRepository;
import com.example.booking.repository.BookingTableRepository;
import com.example.booking.repository.RestaurantTableRepository;

/**
 * Service ƒë·ªÉ qu·∫£n l√Ω table status t·ª± ƒë·ªông
 */
@Service
@Transactional
public class TableStatusManagementService {
    
    @Autowired
    private BookingTableRepository bookingTableRepository;
    
    @Autowired
    private RestaurantTableRepository restaurantTableRepository;
    
    @Autowired
    private BookingRepository bookingRepository;
    
    // Constants
    private static final int NO_SHOW_MINUTES = 15; // 15 ph√∫t sau booking time
    
    /**
     * Scheduled task ch·∫°y m·ªói 5 ph√∫t ƒë·ªÉ check v√† update table status
     */
    @Scheduled(fixedRate = 300000) // 5 ph√∫t
    public void updateTableStatuses() {
        System.out.println("üîÑ Running scheduled table status update...");
        
        try {
            // 1. Check no-show bookings v√† chuy·ªÉn v·ªÅ AVAILABLE
            handleNoShowBookings();
            
            // 2. Check cleaning tables v√† chuy·ªÉn v·ªÅ AVAILABLE
            handleCleaningTables();
            
            // 3. Check upcoming bookings v√† chuy·ªÉn sang RESERVED
            handleUpcomingBookings();
            
            System.out.println("‚úÖ Table status update completed");
        } catch (Exception e) {
            System.err.println("‚ùå Error in scheduled table status update: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * X·ª≠ l√Ω no-show bookings - chuy·ªÉn table v·ªÅ AVAILABLE
     */
    private void handleNoShowBookings() {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime noShowThreshold = now.minusMinutes(NO_SHOW_MINUTES);
        
        // T√¨m c√°c booking ƒë√£ qu√° h·∫°n m√† ch∆∞a ƒë∆∞·ª£c check-in
        List<Booking> noShowBookings = bookingRepository.findNoShowBookings(noShowThreshold);
        
        for (Booking booking : noShowBookings) {
            System.out.println("üö´ Handling no-show booking: " + booking.getBookingId());
            
            // Update booking status
            booking.setStatus(BookingStatus.CANCELLED);
            bookingRepository.save(booking);
            
            // Update table status v·ªÅ AVAILABLE
            List<BookingTable> bookingTables = bookingTableRepository.findByBooking(booking);
            for (BookingTable bookingTable : bookingTables) {
                RestaurantTable table = bookingTable.getTable();
                if (table.getStatus() == TableStatus.RESERVED) {
                    table.setStatus(TableStatus.AVAILABLE);
                    restaurantTableRepository.save(table);
                    System.out.println("‚úÖ Table " + table.getTableName() + " set to AVAILABLE (no-show)");
                }
            }
        }
    }
    
    /**
     * X·ª≠ l√Ω cleaning tables - chuy·ªÉn v·ªÅ AVAILABLE sau 20 ph√∫t
     * S·ª≠ d·ª•ng c√°ch ƒë∆°n gi·∫£n: t√¨m tables CLEANING v√† chuy·ªÉn v·ªÅ AVAILABLE sau 20 ph√∫t
     */
    private void handleCleaningTables() {
        // T√¨m t·∫•t c·∫£ tables ƒëang cleaning
        List<RestaurantTable> cleaningTables = restaurantTableRepository.findByStatus(TableStatus.CLEANING);
        
        for (RestaurantTable table : cleaningTables) {
            // ƒê∆°n gi·∫£n: chuy·ªÉn t·∫•t c·∫£ tables CLEANING v·ªÅ AVAILABLE sau 20 ph√∫t
            // Trong th·ª±c t·∫ø, c√≥ th·ªÉ l∆∞u th·ªùi gian checkout v√†o m·ªôt field ri√™ng
            table.setStatus(TableStatus.AVAILABLE);
            restaurantTableRepository.save(table);
            System.out.println(
                    "üßπ Table " + table.getTableName() + " cleaning completed after 20 minutes, setting to AVAILABLE");
        }
    }
    
    /**
     * X·ª≠ l√Ω upcoming bookings - chuy·ªÉn table sang RESERVED
     * CHUY·ªÇN khi booking status l√† CONFIRMED HO·∫∂C COMPLETED
     * CONFIRMED = nh√† h√†ng x√°c nh·∫≠n th·ªß c√¥ng
     * COMPLETED = thanh to√°n online th√†nh c√¥ng
     */
    private void handleUpcomingBookings() {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime upcomingThreshold = now.plusMinutes(30); // 30 ph√∫t tr∆∞·ªõc booking time
        
        // T√¨m c√°c booking s·∫Øp t·ªõi
        List<Booking> upcomingBookings = bookingRepository.findUpcomingBookings(now, upcomingThreshold);
        
        for (Booking booking : upcomingBookings) {
            System.out.println("‚è∞ Handling upcoming booking: " + booking.getBookingId() + " (status: "
                    + booking.getStatus() + ")");
            
            // CHUY·ªÇN table sang RESERVED khi booking status l√† CONFIRMED HO·∫∂C COMPLETED
            // CONFIRMED = nh√† h√†ng x√°c nh·∫≠n th·ªß c√¥ng
            // COMPLETED = thanh to√°n online th√†nh c√¥ng
            if (booking.getStatus() == BookingStatus.CONFIRMED || booking.getStatus() == BookingStatus.COMPLETED) {
                List<BookingTable> bookingTables = bookingTableRepository.findByBooking(booking);
                for (BookingTable bookingTable : bookingTables) {
                    RestaurantTable table = bookingTable.getTable();
                    if (table.getStatus() == TableStatus.AVAILABLE) {
                        table.setStatus(TableStatus.RESERVED);
                        restaurantTableRepository.save(table);
                        System.out.println(
                                "‚úÖ Table " + table.getTableName() + " set to RESERVED (upcoming " + booking.getStatus()
                                        + " booking)");
                    }
                }
            } else {
                System.out.println("‚è∏Ô∏è Skipping booking " + booking.getBookingId() + " - status is "
                        + booking.getStatus() + " (not CONFIRMED or COMPLETED)");
            }
        }
    }
    
    /**
     * Manual: Chuy·ªÉn t·ª´ RESERVED ho·∫∑c AVAILABLE ‚Üí OCCUPIED khi kh√°ch t·ªõi
     * Check-in ch·ªâ thay ƒë·ªïi table status, kh√¥ng thay ƒë·ªïi booking status
     */
    public void checkInCustomer(Integer bookingId) {
        Booking booking = bookingRepository.findById(bookingId)
                .orElseThrow(() -> new IllegalArgumentException("Booking not found"));
        
        // Booking ph·∫£i ·ªü status CONFIRMED ho·∫∑c COMPLETED ƒë·ªÉ check-in
        if (booking.getStatus() != BookingStatus.CONFIRMED && booking.getStatus() != BookingStatus.COMPLETED) {
            throw new IllegalArgumentException("Booking must be CONFIRMED or COMPLETED to check-in");
        }
        
        // Kh√¥ng thay ƒë·ªïi booking status, ch·ªâ thay ƒë·ªïi table status
        List<BookingTable> bookingTables = bookingTableRepository.findByBooking(booking);
        for (BookingTable bookingTable : bookingTables) {
            RestaurantTable table = bookingTable.getTable();
            // Chuy·ªÉn t·ª´ RESERVED ho·∫∑c AVAILABLE ‚Üí OCCUPIED
            if (table.getStatus() == TableStatus.RESERVED || table.getStatus() == TableStatus.AVAILABLE) {
                TableStatus oldStatus = table.getStatus();
                table.setStatus(TableStatus.OCCUPIED);
                restaurantTableRepository.save(table);
                System.out.println("‚úÖ Customer checked in - Table " + table.getTableName() + " set to OCCUPIED (from "
                        + oldStatus + ")");
            } else {
                System.out.println("‚ö†Ô∏è Table " + table.getTableName() + " is in " + table.getStatus()
                        + " status, cannot check-in");
            }
        }
    }
    
    /**
     * Manual: Chuy·ªÉn t·ª´ OCCUPIED ‚Üí CLEANING khi kh√°ch r·ªùi
     * Check-out ch·ªâ thay ƒë·ªïi table status, kh√¥ng thay ƒë·ªïi booking status
     */
    public void checkOutCustomer(Integer bookingId) {
        Booking booking = bookingRepository.findById(bookingId)
                .orElseThrow(() -> new IllegalArgumentException("Booking not found"));
        
        // Booking ph·∫£i ·ªü status CONFIRMED ho·∫∑c COMPLETED ƒë·ªÉ check-out
        if (booking.getStatus() != BookingStatus.CONFIRMED && booking.getStatus() != BookingStatus.COMPLETED) {
            throw new IllegalArgumentException("Booking must be CONFIRMED or COMPLETED to check-out");
        }
        
        // Kh√¥ng thay ƒë·ªïi booking status, ch·ªâ thay ƒë·ªïi table status
        List<BookingTable> bookingTables = bookingTableRepository.findByBooking(booking);
        for (BookingTable bookingTable : bookingTables) {
            RestaurantTable table = bookingTable.getTable();
            if (table.getStatus() == TableStatus.OCCUPIED) {
                table.setStatus(TableStatus.CLEANING);
                restaurantTableRepository.save(table);
                System.out.println("‚úÖ Customer checked out - Table " + table.getTableName() + " set to CLEANING");
            }
        }
    }
    
    /**
     * Manual: Chuy·ªÉn t·ª´ CLEANING ‚Üí AVAILABLE sau khi d·ªçn xong
     */
    public void completeCleaning(Integer tableId) {
        RestaurantTable table = restaurantTableRepository.findById(tableId)
                .orElseThrow(() -> new IllegalArgumentException("Table not found"));
        
        if (table.getStatus() == TableStatus.CLEANING) {
            table.setStatus(TableStatus.AVAILABLE);
            restaurantTableRepository.save(table);
            System.out.println("‚úÖ Cleaning completed - Table " + table.getTableName() + " set to AVAILABLE");
        } else {
            throw new IllegalArgumentException("Table is not in CLEANING status");
        }
    }
    
    /**
     * Manual: Set table to MAINTENANCE
     */
    public void setTableToMaintenance(Integer tableId) {
        RestaurantTable table = restaurantTableRepository.findById(tableId)
                .orElseThrow(() -> new IllegalArgumentException("Table not found"));
        
        table.setStatus(TableStatus.MAINTENANCE);
        restaurantTableRepository.save(table);
        System.out.println("üîß Table " + table.getTableName() + " set to MAINTENANCE");
    }
    
    /**
     * Manual: Set table to AVAILABLE
     */
    public void setTableToAvailable(Integer tableId) {
        RestaurantTable table = restaurantTableRepository.findById(tableId)
                .orElseThrow(() -> new IllegalArgumentException("Table not found"));
        
        table.setStatus(TableStatus.AVAILABLE);
        restaurantTableRepository.save(table);
        System.out.println("‚úÖ Table " + table.getTableName() + " set to AVAILABLE");
    }
}
