package com.example.booking.service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.booking.domain.Notification;
import com.example.booking.domain.NotificationStatus;
import com.example.booking.domain.NotificationType;
import com.example.booking.domain.RestaurantProfile;
import com.example.booking.domain.User;
import com.example.booking.domain.UserRole;
import com.example.booking.repository.NotificationRepository;
import com.example.booking.repository.UserRepository;

/**
 * Service for Restaurant Approval Notifications
 */
@Service
@Transactional
public class RestaurantNotificationService {

    private static final Logger logger = LoggerFactory.getLogger(RestaurantNotificationService.class);
    
    @Autowired
    private EmailService emailService;
    
    @Autowired
    private NotificationService notificationService;

    @Autowired
    private NotificationRepository notificationRepository;

    @Autowired
    private UserRepository userRepository;

    /**
     * Notify restaurant approval (legacy method name for compatibility)
     */
    public void notifyRestaurantApproval(RestaurantProfile restaurant, String approvedBy, String approvalReason) {
        sendApprovalNotification(restaurant);
    }
    
    /**
     * Notify restaurant rejection (legacy method name for compatibility)
     */
    public void notifyRestaurantRejection(RestaurantProfile restaurant, String rejectedBy, String rejectionReason) {
        sendRejectionNotification(restaurant, rejectionReason);
    }
    
    /**
     * Notify restaurant suspension (legacy method name for compatibility)
     */
    public void notifyRestaurantSuspension(RestaurantProfile restaurant, String suspendedBy, String suspensionReason) {
        sendSuspensionNotification(restaurant, suspensionReason);
    }
    
    /**
     * G·ª≠i th√¥ng b√°o khi nh√† h√†ng ƒë∆∞·ª£c duy·ªát
     */
    public void sendApprovalNotification(RestaurantProfile restaurant) {
        try {
            logger.info("Sending approval notification for restaurant: {}", restaurant.getRestaurantName());
            
            // L·∫•y th√¥ng tin owner
            User owner = restaurant.getOwner().getUser();
            if (owner == null || owner.getEmail() == null) {
                logger.warn("Cannot send notification - owner email not found for restaurant: {}", 
                    restaurant.getRestaurantId());
                return;
            }

            // T·∫°o email content
            String subject = "üéâ Nh√† h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c duy·ªát - BookEat";
            String emailContent = buildApprovalEmailContent(restaurant);
            
            // G·ª≠i email
            emailService.sendRestaurantApprovalEmail(
                owner.getEmail(), 
                    restaurant.getRestaurantName(),
                subject, 
                emailContent
            );
            
            // T·∫°o in-app notification
            createInAppNotification(
                owner.getId(),
                NotificationType.RESTAURANT_APPROVED,
                "Nh√† h√†ng '" + restaurant.getRestaurantName() + "' ƒë√£ ƒë∆∞·ª£c duy·ªát th√†nh c√¥ng!",
                "B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu setup menu v√† b√†n ƒë·ªÉ nh·∫≠n ƒë·∫∑t b√†n t·ª´ kh√°ch h√†ng.",
                "/restaurant-owner/profile"
            );
            
            logger.info("‚úÖ Approval notification sent successfully for restaurant: {}", restaurant.getRestaurantName());
            
        } catch (Exception e) {
            logger.error("‚ùå Failed to send approval notification for restaurant: {}", 
                restaurant.getRestaurantName(), e);
        }
    }

    /**
     * G·ª≠i th√¥ng b√°o khi nh√† h√†ng b·ªã t·ª´ ch·ªëi
     */
    public void sendRejectionNotification(RestaurantProfile restaurant, String rejectionReason) {
        try {
            logger.info("Sending rejection notification for restaurant: {}", restaurant.getRestaurantName());
            
            // L·∫•y th√¥ng tin owner
            User owner = restaurant.getOwner().getUser();
            if (owner == null || owner.getEmail() == null) {
                logger.warn("Cannot send notification - owner email not found for restaurant: {}", 
                    restaurant.getRestaurantId());
                return;
            }
            
            // T·∫°o email content
            String subject = "‚ùå Y√™u c·∫ßu ƒëƒÉng k√Ω nh√† h√†ng - BookEat";
            String emailContent = buildRejectionEmailContent(restaurant, rejectionReason);
            
            // G·ª≠i email
            emailService.sendRestaurantRejectionEmail(
                owner.getEmail(),
                restaurant.getRestaurantName(),
                subject, 
                emailContent
            );
            
            // T·∫°o in-app notification
            createInAppNotification(
                owner.getId(),
                NotificationType.RESTAURANT_REJECTED,
                "Nh√† h√†ng '" + restaurant.getRestaurantName() + "' ch∆∞a ƒë∆∞·ª£c duy·ªát",
                "L√Ω do: " + (rejectionReason != null ? rejectionReason : "Kh√¥ng ƒë√°p ·ª©ng y√™u c·∫ßu"),
                "/restaurant-owner/register"
            );
            
            logger.info("‚úÖ Rejection notification sent successfully for restaurant: {}", restaurant.getRestaurantName());
            
        } catch (Exception e) {
            logger.error("‚ùå Failed to send rejection notification for restaurant: {}", 
                restaurant.getRestaurantName(), e);
        }
    }

    /**
     * G·ª≠i th√¥ng b√°o khi nh√† h√†ng b·ªã t·∫°m d·ª´ng
     */
    public void sendSuspensionNotification(RestaurantProfile restaurant, String suspensionReason) {
        try {
            logger.info("Sending suspension notification for restaurant: {}", restaurant.getRestaurantName());
            
            // L·∫•y th√¥ng tin owner
            User owner = restaurant.getOwner().getUser();
            if (owner == null || owner.getEmail() == null) {
                logger.warn("Cannot send notification - owner email not found for restaurant: {}", 
                    restaurant.getRestaurantId());
                return;
            }
            
            // T·∫°o email content
            String subject = "‚ö†Ô∏è Nh√† h√†ng t·∫°m d·ª´ng ho·∫°t ƒë·ªông - BookEat";
            String emailContent = buildSuspensionEmailContent(restaurant, suspensionReason);
            
            // G·ª≠i email
            emailService.sendRestaurantSuspensionEmail(
                owner.getEmail(),
                restaurant.getRestaurantName(),
                subject, 
                emailContent
            );
            
            // T·∫°o in-app notification
            createInAppNotification(
                owner.getId(),
                NotificationType.RESTAURANT_SUSPENDED,
                "Nh√† h√†ng '" + restaurant.getRestaurantName() + "' ƒë√£ b·ªã t·∫°m d·ª´ng",
                "L√Ω do: " + (suspensionReason != null ? suspensionReason : "Vi ph·∫°m quy ƒë·ªãnh"),
                "/restaurant-owner/profile"
            );
            
            logger.info("‚úÖ Suspension notification sent successfully for restaurant: {}", restaurant.getRestaurantName());
            
        } catch (Exception e) {
            logger.error("‚ùå Failed to send suspension notification for restaurant: {}", 
                restaurant.getRestaurantName(), e);
        }
    }

    /**
     * G·ª≠i th√¥ng b√°o khi nh√† h√†ng ƒë∆∞·ª£c k√≠ch ho·∫°t l·∫°i
     */
    public void sendActivationNotification(RestaurantProfile restaurant, String activationReason) {
        try {
            logger.info("Sending activation notification for restaurant: {}", restaurant.getRestaurantName());
            
            // L·∫•y th√¥ng tin owner
            User owner = restaurant.getOwner().getUser();
            if (owner == null || owner.getEmail() == null) {
                logger.warn("Cannot send notification - owner email not found for restaurant: {}", 
                    restaurant.getRestaurantId());
                return;
            }
            
            // T·∫°o email content
            String subject = "‚úÖ Nh√† h√†ng ƒë∆∞·ª£c k√≠ch ho·∫°t l·∫°i - BookEat";
            String emailContent = buildActivationEmailContent(restaurant, activationReason);
            
            // G·ª≠i email
            emailService.sendRestaurantActivationEmail(
                owner.getEmail(),
                restaurant.getRestaurantName(),
                subject, 
                emailContent
            );
            
            // T·∫°o in-app notification
            createInAppNotification(
                owner.getId(),
                NotificationType.RESTAURANT_ACTIVATED,
                "Nh√† h√†ng '" + restaurant.getRestaurantName() + "' ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t l·∫°i",
                "B·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c nh·∫≠n ƒë·∫∑t b√†n t·ª´ kh√°ch h√†ng.",
                "/restaurant-owner/profile"
            );
            
            logger.info("‚úÖ Activation notification sent successfully for restaurant: {}", restaurant.getRestaurantName());
            
        } catch (Exception e) {
            logger.error("‚ùå Failed to send activation notification for restaurant: {}", 
                restaurant.getRestaurantName(), e);
        }
    }

    /**
     * G·ª≠i th√¥ng b√°o cho admin khi c√≥ y√™u c·∫ßu ƒëƒÉng k√Ω m·ªõi
     */
    public void notifyAdminNewRegistration(RestaurantProfile restaurant) {
        try {
            logger.info("Notifying admin about new restaurant registration: {}", restaurant.getRestaurantName());
            
            // T√¨m admin users
            List<User> adminUsers = userRepository.findByRoleAndActiveTrue(UserRole.admin);
            
            for (User admin : adminUsers) {
                // T·∫°o in-app notification cho admin
                createInAppNotification(
                    admin.getId(),
                    NotificationType.RESTAURANT_REGISTRATION_SUBMITTED,
                    "Y√™u c·∫ßu ƒëƒÉng k√Ω nh√† h√†ng m·ªõi: " + restaurant.getRestaurantName(),
                    "C√≥ nh√† h√†ng m·ªõi c·∫ßn ƒë∆∞·ª£c duy·ªát. Vui l√≤ng ki·ªÉm tra th√¥ng tin v√† x·ª≠ l√Ω.",
                    "/admin/restaurant/requests/" + restaurant.getRestaurantId()
                );
            }
            
            logger.info("‚úÖ Admin notification sent for new restaurant registration: {}", restaurant.getRestaurantName());
            
        } catch (Exception e) {
            logger.error("‚ùå Failed to notify admin about new restaurant registration: {}", 
                restaurant.getRestaurantName(), e);
        }
    }
    
    // ============= PRIVATE HELPER METHODS =============
    
    private void createInAppNotification(UUID userId, NotificationType type, String title, String content, String actionUrl) {
        try {
            Notification notification = new Notification();
            notification.setRecipientUserId(userId);
            notification.setType(type);
            notification.setTitle(title);
            notification.setContent(content);
            // notification.setActionUrl(actionUrl); // Method not available in current Notification entity
            notification.setStatus(NotificationStatus.SENT);
            notification.setPublishAt(LocalDateTime.now());
            notification.setExpireAt(LocalDateTime.now().plusDays(30)); // 30 ng√†y
            
            notificationRepository.save(notification);
            logger.debug("Created in-app notification for user: {} - type: {}", userId, type);
            
        } catch (Exception e) {
            logger.error("Failed to create in-app notification for user: {} - type: {}", userId, type, e);
        }
    }
    
    private String buildApprovalEmailContent(RestaurantProfile restaurant) {
        StringBuilder content = new StringBuilder();
        content.append("<html><body style='font-family: Arial, sans-serif; line-height: 1.6; color: #333;'>");
        content.append("<div style='max-width: 600px; margin: 0 auto; padding: 20px;'>");
        
        content.append("<div style='text-align: center; margin-bottom: 30px;'>");
        content.append("<h1 style='color: #28a745; margin-bottom: 10px;'>üéâ Ch√∫c m·ª´ng!</h1>");
        content.append("<h2 style='color: #333; margin-bottom: 20px;'>Nh√† h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c duy·ªát</h2>");
        content.append("</div>");
        
        content.append("<div style='background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;'>");
        content.append("<h3 style='color: #333; margin-bottom: 15px;'>üìã Th√¥ng tin nh√† h√†ng:</h3>");
        content.append("<p><strong>T√™n nh√† h√†ng:</strong> ").append(restaurant.getRestaurantName()).append("</p>");
        content.append("<p><strong>ƒê·ªãa ch·ªâ:</strong> ").append(restaurant.getAddress()).append("</p>");
        content.append("<p><strong>Lo·∫°i ·∫©m th·ª±c:</strong> ").append(restaurant.getCuisineType()).append("</p>");
        content.append("<p><strong>Th·ªùi gian duy·ªát:</strong> ").append(LocalDateTime.now().toString()).append("</p>");
        content.append("</div>");
        
        content.append("<div style='background: #e7f3ff; padding: 20px; border-radius: 8px; margin-bottom: 20px;'>");
        content.append("<h3 style='color: #0066cc; margin-bottom: 15px;'>üöÄ B∆∞·ªõc ti·∫øp theo:</h3>");
        content.append("<ul style='color: #333;'>");
        content.append("<li>ƒêƒÉng nh·∫≠p v√†o t√†i kho·∫£n nh√† h√†ng</li>");
        content.append("<li>Ho√†n thi·ªán th√¥ng tin h·ªì s∆° nh√† h√†ng</li>");
        content.append("<li>Thi·∫øt l·∫≠p menu v√† gi√° c·∫£</li>");
        content.append("<li>Thi·∫øt l·∫≠p b√†n v√† khu v·ª±c</li>");
        content.append("<li>B·∫Øt ƒë·∫ßu nh·∫≠n ƒë·∫∑t b√†n t·ª´ kh√°ch h√†ng</li>");
        content.append("</ul>");
        content.append("</div>");
        
        content.append("<div style='text-align: center; margin: 30px 0;'>");
        content.append("<a href='http://localhost:8080/restaurant-owner/profile' ");
        content.append("style='background: #28a745; color: white; padding: 12px 30px; text-decoration: none; ");
        content.append("border-radius: 5px; font-weight: bold;'>Truy c·∫≠p Dashboard</a>");
        content.append("</div>");
        
        content.append("<div style='text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee;'>");
        content.append("<p style='color: #666; font-size: 14px;'>");
        content.append("C·∫£m ∆°n b·∫°n ƒë√£ ch·ªçn BookEat l√†m ƒë·ªëi t√°c!<br>");
        content.append("Ch√∫c b·∫°n kinh doanh th√†nh c√¥ng! üçΩÔ∏è");
        content.append("</p>");
        content.append("</div>");
        
        content.append("</div></body></html>");
        return content.toString();
    }
    
    private String buildRejectionEmailContent(RestaurantProfile restaurant, String rejectionReason) {
        StringBuilder content = new StringBuilder();
        content.append("<html><body style='font-family: Arial, sans-serif; line-height: 1.6; color: #333;'>");
        content.append("<div style='max-width: 600px; margin: 0 auto; padding: 20px;'>");
        
        content.append("<div style='text-align: center; margin-bottom: 30px;'>");
        content.append("<h1 style='color: #dc3545; margin-bottom: 10px;'>‚ùå Th√¥ng b√°o</h1>");
        content.append("<h2 style='color: #333; margin-bottom: 20px;'>Y√™u c·∫ßu ƒëƒÉng k√Ω nh√† h√†ng</h2>");
        content.append("</div>");
        
        content.append("<div style='background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;'>");
        content.append("<h3 style='color: #333; margin-bottom: 15px;'>üìã Th√¥ng tin nh√† h√†ng:</h3>");
        content.append("<p><strong>T√™n nh√† h√†ng:</strong> ").append(restaurant.getRestaurantName()).append("</p>");
        content.append("<p><strong>ƒê·ªãa ch·ªâ:</strong> ").append(restaurant.getAddress()).append("</p>");
        content.append("<p><strong>Lo·∫°i ·∫©m th·ª±c:</strong> ").append(restaurant.getCuisineType()).append("</p>");
        content.append("</div>");
        
        content.append("<div style='background: #fff3cd; padding: 20px; border-radius: 8px; margin-bottom: 20px;'>");
        content.append("<h3 style='color: #856404; margin-bottom: 15px;'>‚ö†Ô∏è L√Ω do t·ª´ ch·ªëi:</h3>");
        content.append("<p style='color: #333;'>").append(rejectionReason != null ? rejectionReason : "Kh√¥ng ƒë√°p ·ª©ng y√™u c·∫ßu c·ªßa ch√∫ng t√¥i").append("</p>");
        content.append("</div>");
        
        content.append("<div style='background: #e7f3ff; padding: 20px; border-radius: 8px; margin-bottom: 20px;'>");
        content.append("<h3 style='color: #0066cc; margin-bottom: 15px;'>üí° H∆∞·ªõng d·∫´n:</h3>");
        content.append("<ul style='color: #333;'>");
        content.append("<li>Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin ƒë√£ cung c·∫•p</li>");
        content.append("<li>ƒê·∫£m b·∫£o c√°c gi·∫•y t·ªù ph√°p l√Ω ƒë·∫ßy ƒë·ªß v√† h·ª£p l·ªá</li>");
        content.append("<li>Li√™n h·ªá v·ªõi ch√∫ng t√¥i n·∫øu c·∫ßn h·ªó tr·ª£</li>");
        content.append("<li>B·∫°n c√≥ th·ªÉ n·ªôp l·∫°i ƒë∆°n ƒëƒÉng k√Ω sau khi kh·∫Øc ph·ª•c</li>");
        content.append("</ul>");
        content.append("</div>");
        
        content.append("<div style='text-align: center; margin: 30px 0;'>");
        content.append("<a href='http://localhost:8080/restaurant-owner/register' ");
        content.append("style='background: #007bff; color: white; padding: 12px 30px; text-decoration: none; ");
        content.append("border-radius: 5px; font-weight: bold;'>ƒêƒÉng k√Ω l·∫°i</a>");
        content.append("</div>");
        
        content.append("<div style='text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee;'>");
        content.append("<p style='color: #666; font-size: 14px;'>");
        content.append("Ch√∫ng t√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n!<br>");
        content.append("Li√™n h·ªá: support@bookeat.com");
        content.append("</p>");
        content.append("</div>");
        
        content.append("</div></body></html>");
        return content.toString();
    }
    
    private String buildSuspensionEmailContent(RestaurantProfile restaurant, String suspensionReason) {
        StringBuilder content = new StringBuilder();
        content.append("<html><body style='font-family: Arial, sans-serif; line-height: 1.6; color: #333;'>");
        content.append("<div style='max-width: 600px; margin: 0 auto; padding: 20px;'>");
        
        content.append("<div style='text-align: center; margin-bottom: 30px;'>");
        content.append("<h1 style='color: #ffc107; margin-bottom: 10px;'>‚ö†Ô∏è Th√¥ng b√°o quan tr·ªçng</h1>");
        content.append("<h2 style='color: #333; margin-bottom: 20px;'>Nh√† h√†ng t·∫°m d·ª´ng ho·∫°t ƒë·ªông</h2>");
        content.append("</div>");
        
        content.append("<div style='background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;'>");
        content.append("<h3 style='color: #333; margin-bottom: 15px;'>üìã Th√¥ng tin nh√† h√†ng:</h3>");
        content.append("<p><strong>T√™n nh√† h√†ng:</strong> ").append(restaurant.getRestaurantName()).append("</p>");
        content.append("<p><strong>ƒê·ªãa ch·ªâ:</strong> ").append(restaurant.getAddress()).append("</p>");
        content.append("<p><strong>Th·ªùi gian t·∫°m d·ª´ng:</strong> ").append(LocalDateTime.now().toString()).append("</p>");
        content.append("</div>");
        
        content.append("<div style='background: #fff3cd; padding: 20px; border-radius: 8px; margin-bottom: 20px;'>");
        content.append("<h3 style='color: #856404; margin-bottom: 15px;'>‚ö†Ô∏è L√Ω do t·∫°m d·ª´ng:</h3>");
        content.append("<p style='color: #333;'>").append(suspensionReason != null ? suspensionReason : "Vi ph·∫°m quy ƒë·ªãnh d·ªãch v·ª•").append("</p>");
        content.append("</div>");
        
        content.append("<div style='background: #e7f3ff; padding: 20px; border-radius: 8px; margin-bottom: 20px;'>");
        content.append("<h3 style='color: #0066cc; margin-bottom: 15px;'>üìû H√†nh ƒë·ªông c·∫ßn thi·∫øt:</h3>");
        content.append("<ul style='color: #333;'>");
        content.append("<li>Li√™n h·ªá ngay v·ªõi b·ªô ph·∫≠n h·ªó tr·ª£</li>");
        content.append("<li>Kh·∫Øc ph·ª•c c√°c v·∫•n ƒë·ªÅ ƒë∆∞·ª£c th√¥ng b√°o</li>");
        content.append("<li>Ch·ªù ƒë√°nh gi√° v√† k√≠ch ho·∫°t l·∫°i t·ª´ admin</li>");
        content.append("<li>Trong th·ªùi gian t·∫°m d·ª´ng, nh√† h√†ng s·∫Ω kh√¥ng nh·∫≠n ƒë·∫∑t b√†n m·ªõi</li>");
        content.append("</ul>");
        content.append("</div>");
        
        content.append("<div style='text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee;'>");
        content.append("<p style='color: #666; font-size: 14px;'>");
        content.append("Li√™n h·ªá h·ªó tr·ª£: support@bookeat.com<br>");
        content.append("Hotline: 1900-xxxx");
        content.append("</p>");
        content.append("</div>");
        
        content.append("</div></body></html>");
        return content.toString();
    }
    
    private String buildActivationEmailContent(RestaurantProfile restaurant, String activationReason) {
        StringBuilder content = new StringBuilder();
        content.append("<html><body style='font-family: Arial, sans-serif; line-height: 1.6; color: #333;'>");
        content.append("<div style='max-width: 600px; margin: 0 auto; padding: 20px;'>");
        
        content.append("<div style='text-align: center; margin-bottom: 30px;'>");
        content.append("<h1 style='color: #28a745; margin-bottom: 10px;'>‚úÖ Ch√†o m·ª´ng tr·ªü l·∫°i!</h1>");
        content.append("<h2 style='color: #333; margin-bottom: 20px;'>Nh√† h√†ng ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t l·∫°i</h2>");
        content.append("</div>");
        
        content.append("<div style='background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;'>");
        content.append("<h3 style='color: #333; margin-bottom: 15px;'>üìã Th√¥ng tin nh√† h√†ng:</h3>");
        content.append("<p><strong>T√™n nh√† h√†ng:</strong> ").append(restaurant.getRestaurantName()).append("</p>");
        content.append("<p><strong>ƒê·ªãa ch·ªâ:</strong> ").append(restaurant.getAddress()).append("</p>");
        content.append("<p><strong>Th·ªùi gian k√≠ch ho·∫°t:</strong> ").append(LocalDateTime.now().toString()).append("</p>");
        content.append("</div>");
        
        content.append("<div style='background: #d4edda; padding: 20px; border-radius: 8px; margin-bottom: 20px;'>");
        content.append("<h3 style='color: #155724; margin-bottom: 15px;'>‚úÖ L√Ω do k√≠ch ho·∫°t:</h3>");
        content.append("<p style='color: #333;'>").append(activationReason != null ? activationReason : "ƒê√£ kh·∫Øc ph·ª•c c√°c v·∫•n ƒë·ªÅ").append("</p>");
        content.append("</div>");
        
        content.append("<div style='background: #e7f3ff; padding: 20px; border-radius: 8px; margin-bottom: 20px;'>");
        content.append("<h3 style='color: #0066cc; margin-bottom: 15px;'>üéâ B·∫°n c√≥ th·ªÉ:</h3>");
        content.append("<ul style='color: #333;'>");
        content.append("<li>Ti·∫øp t·ª•c nh·∫≠n ƒë·∫∑t b√†n t·ª´ kh√°ch h√†ng</li>");
        content.append("<li>C·∫≠p nh·∫≠t menu v√† th√¥ng tin nh√† h√†ng</li>");
        content.append("<li>Qu·∫£n l√Ω c√°c ƒë·∫∑t b√†n hi·ªán t·∫°i</li>");
        content.append("<li>T·∫≠n h∆∞·ªüng d·ªãch v·ª• BookEat nh∆∞ b√¨nh th∆∞·ªùng</li>");
        content.append("</ul>");
        content.append("</div>");
        
        content.append("<div style='text-align: center; margin: 30px 0;'>");
        content.append("<a href='http://localhost:8080/restaurant-owner/profile' ");
        content.append("style='background: #28a745; color: white; padding: 12px 30px; text-decoration: none; ");
        content.append("border-radius: 5px; font-weight: bold;'>Truy c·∫≠p Dashboard</a>");
        content.append("</div>");
        
        content.append("<div style='text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee;'>");
        content.append("<p style='color: #666; font-size: 14px;'>");
        content.append("C·∫£m ∆°n b·∫°n ƒë√£ h·ª£p t√°c v·ªõi BookEat!<br>");
        content.append("Ch√∫c b·∫°n kinh doanh th√†nh c√¥ng! üçΩÔ∏è");
        content.append("</p>");
        content.append("</div>");
        
        content.append("</div></body></html>");
        return content.toString();
    }
}