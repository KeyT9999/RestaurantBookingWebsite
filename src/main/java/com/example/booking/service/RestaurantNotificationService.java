package com.example.booking.service;

import com.example.booking.domain.Notification;
import com.example.booking.domain.NotificationType;
import com.example.booking.domain.RestaurantProfile;
import com.example.booking.domain.User;
import com.example.booking.domain.UserRole;
import com.example.booking.repository.NotificationRepository;
import com.example.booking.repository.UserRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

/**
 * Service x·ª≠ l√Ω th√¥ng b√°o cho Restaurant Approval Workflow
 */
@Service
@Transactional
public class RestaurantNotificationService {

    private static final Logger logger = LoggerFactory.getLogger(RestaurantNotificationService.class);

    @Autowired
    private NotificationRepository notificationRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private EmailService emailService;

    /**
     * G·ª≠i th√¥ng b√°o ƒëƒÉng k√Ω nh√† h√†ng m·ªõi cho Admin
     */
    public void notifyNewRestaurantRegistration(RestaurantProfile restaurant) {
        try {
            // L·∫•y danh s√°ch admin
            List<User> admins = userRepository.findByRole(UserRole.ADMIN, null).getContent();
            
            if (admins.isEmpty()) {
                logger.warn("‚ö†Ô∏è No admin users found for restaurant registration notification");
                return;
            }

            // G·ª≠i th√¥ng b√°o cho t·ª´ng admin
            for (User admin : admins) {
                // T·∫°o notification trong database
                Notification notification = new Notification();
                notification.setRecipientUserId(admin.getId());
                notification.setType(NotificationType.RESTAURANT_REGISTRATION_SUBMITTED);
                notification.setTitle("Nh√† h√†ng m·ªõi ƒëƒÉng k√Ω: " + restaurant.getRestaurantName());
                notification.setContent(String.format(
                    "Nh√† h√†ng \"%s\" ƒë√£ g·ª≠i y√™u c·∫ßu ƒëƒÉng k√Ω v√† c·∫ßn ƒë∆∞·ª£c duy·ªát.\n" +
                    "Ch·ªß s·ªü h·ªØu: %s\n" +
                    "ƒê·ªãa ch·ªâ: %s\n" +
                    "Lo·∫°i ·∫©m th·ª±c: %s",
                    restaurant.getRestaurantName(),
                    restaurant.getOwner().getUser().getUsername(),
                    restaurant.getAddress(),
                    restaurant.getCuisineType()
                ));
                notification.setLinkUrl("/admin/restaurant/requests/" + restaurant.getId());
                notification.setPriority(1); // High priority
                notification.setPublishAt(LocalDateTime.now());
                notification.setExpireAt(LocalDateTime.now().plusDays(7)); // Expire after 7 days
                
                notificationRepository.save(notification);
                
                // G·ª≠i email cho admin
                emailService.sendNewRestaurantRegistrationToAdmin(
                    admin.getEmail(),
                    restaurant.getRestaurantName(),
                    restaurant.getOwner().getUser().getUsername(),
                    restaurant.getOwner().getUser().getEmail()
                );
                
                logger.info("‚úÖ New restaurant registration notification sent to admin: {}", admin.getUsername());
            }
            
        } catch (Exception e) {
            logger.error("‚ùå Failed to send new restaurant registration notification", e);
        }
    }

    /**
     * G·ª≠i th√¥ng b√°o duy·ªát nh√† h√†ng cho ch·ªß s·ªü h·ªØu
     */
    public void notifyRestaurantApproval(RestaurantProfile restaurant, String approvedBy, String approvalReason) {
        try {
            User owner = restaurant.getOwner().getUser();
            
            // T·∫°o notification trong database
            Notification notification = new Notification();
            notification.setRecipientUserId(owner.getId());
            notification.setType(NotificationType.RESTAURANT_APPROVED);
            notification.setTitle("üéâ Nh√† h√†ng ƒë√£ ƒë∆∞·ª£c duy·ªát: " + restaurant.getRestaurantName());
            notification.setContent(String.format(
                "Ch√∫c m·ª´ng! Nh√† h√†ng \"%s\" c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c duy·ªát th√†nh c√¥ng!\n\n" +
                "Ng∆∞·ªùi duy·ªát: %s\n" +
                "Th·ªùi gian: %s\n" +
                "%s\n\n" +
                "B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu thi·∫øt l·∫≠p th√¥ng tin nh√† h√†ng v√† nh·∫≠n booking t·ª´ kh√°ch h√†ng.",
                restaurant.getRestaurantName(),
                approvedBy,
                LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm")),
                approvalReason != null && !approvalReason.trim().isEmpty() 
                    ? "L√Ω do: " + approvalReason 
                    : "Nh√† h√†ng ƒë√°p ·ª©ng ƒë·∫ßy ƒë·ªß y√™u c·∫ßu c·ªßa h·ªá th·ªëng"
            ));
            notification.setLinkUrl("/restaurant/dashboard");
            notification.setPriority(1); // High priority
            notification.setPublishAt(LocalDateTime.now());
            notification.setExpireAt(LocalDateTime.now().plusDays(30)); // Expire after 30 days
            
            notificationRepository.save(notification);
            
            // G·ª≠i email cho ch·ªß nh√† h√†ng
            emailService.sendRestaurantApprovalEmail(
                owner.getEmail(),
                owner.getUsername(),
                restaurant.getRestaurantName(),
                approvalReason
            );
            
            logger.info("‚úÖ Restaurant approval notification sent to owner: {}", owner.getUsername());
            
        } catch (Exception e) {
            logger.error("‚ùå Failed to send restaurant approval notification", e);
        }
    }

    /**
     * G·ª≠i th√¥ng b√°o t·ª´ ch·ªëi nh√† h√†ng cho ch·ªß s·ªü h·ªØu
     */
    public void notifyRestaurantRejection(RestaurantProfile restaurant, String rejectedBy, String rejectionReason) {
        try {
            User owner = restaurant.getOwner().getUser();
            
            // T·∫°o notification trong database
            Notification notification = new Notification();
            notification.setRecipientUserId(owner.getId());
            notification.setType(NotificationType.RESTAURANT_REJECTED);
            notification.setTitle("‚ùå Y√™u c·∫ßu ƒëƒÉng k√Ω b·ªã t·ª´ ch·ªëi: " + restaurant.getRestaurantName());
            notification.setContent(String.format(
                "R·∫•t ti·∫øc, y√™u c·∫ßu ƒëƒÉng k√Ω nh√† h√†ng \"%s\" c·ªßa b·∫°n ƒë√£ b·ªã t·ª´ ch·ªëi.\n\n" +
                "Ng∆∞·ªùi x·ª≠ l√Ω: %s\n" +
                "Th·ªùi gian: %s\n" +
                "L√Ω do t·ª´ ch·ªëi: %s\n\n" +
                "Vui l√≤ng xem x√©t l·∫°i v√† g·ª≠i y√™u c·∫ßu m·ªõi v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß h∆°n.",
                restaurant.getRestaurantName(),
                rejectedBy,
                LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm")),
                rejectionReason != null ? rejectionReason : "Kh√¥ng ƒë√°p ·ª©ng y√™u c·∫ßu c·ªßa h·ªá th·ªëng"
            ));
            notification.setLinkUrl("/restaurant/register");
            notification.setPriority(2); // Medium priority
            notification.setPublishAt(LocalDateTime.now());
            notification.setExpireAt(LocalDateTime.now().plusDays(30)); // Expire after 30 days
            
            notificationRepository.save(notification);
            
            // G·ª≠i email cho ch·ªß nh√† h√†ng
            emailService.sendRestaurantRejectionEmail(
                owner.getEmail(),
                owner.getUsername(),
                restaurant.getRestaurantName(),
                rejectionReason
            );
            
            logger.info("‚úÖ Restaurant rejection notification sent to owner: {}", owner.getUsername());
            
        } catch (Exception e) {
            logger.error("‚ùå Failed to send restaurant rejection notification", e);
        }
    }

    /**
     * G·ª≠i th√¥ng b√°o t·∫°m d·ª´ng nh√† h√†ng cho ch·ªß s·ªü h·ªØu
     */
    public void notifyRestaurantSuspension(RestaurantProfile restaurant, String suspendedBy, String suspensionReason) {
        try {
            User owner = restaurant.getOwner().getUser();
            
            // T·∫°o notification trong database
            Notification notification = new Notification();
            notification.setRecipientUserId(owner.getId());
            notification.setType(NotificationType.RESTAURANT_SUSPENDED);
            notification.setTitle("‚ö†Ô∏è Nh√† h√†ng t·∫°m d·ª´ng ho·∫°t ƒë·ªông: " + restaurant.getRestaurantName());
            notification.setContent(String.format(
                "Nh√† h√†ng \"%s\" c·ªßa b·∫°n ƒë√£ b·ªã t·∫°m d·ª´ng ho·∫°t ƒë·ªông.\n\n" +
                "Ng∆∞·ªùi x·ª≠ l√Ω: %s\n" +
                "Th·ªùi gian: %s\n" +
                "L√Ω do: %s\n\n" +
                "Trong th·ªùi gian t·∫°m d·ª´ng:\n" +
                "‚Ä¢ Kh√¥ng th·ªÉ nh·∫≠n booking m·ªõi\n" +
                "‚Ä¢ C√°c booking hi·ªán t·∫°i v·∫´n ƒë∆∞·ª£c gi·ªØ nguy√™n\n" +
                "‚Ä¢ Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin nh√† h√†ng\n\n" +
                "Vui l√≤ng li√™n h·ªá ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ kh·∫Øc ph·ª•c.",
                restaurant.getRestaurantName(),
                suspendedBy,
                LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm")),
                suspensionReason != null ? suspensionReason : "Vi ph·∫°m quy ƒë·ªãnh h·ªá th·ªëng"
            ));
            notification.setLinkUrl("/contact");
            notification.setPriority(1); // High priority
            notification.setPublishAt(LocalDateTime.now());
            notification.setExpireAt(LocalDateTime.now().plusDays(30)); // Expire after 30 days
            
            notificationRepository.save(notification);
            
            // G·ª≠i email cho ch·ªß nh√† h√†ng
            emailService.sendRestaurantSuspensionEmail(
                owner.getEmail(),
                owner.getUsername(),
                restaurant.getRestaurantName(),
                suspensionReason
            );
            
            logger.info("‚úÖ Restaurant suspension notification sent to owner: {}", owner.getUsername());
            
        } catch (Exception e) {
            logger.error("‚ùå Failed to send restaurant suspension notification", e);
        }
    }

    /**
     * G·ª≠i th√¥ng b√°o k√≠ch ho·∫°t l·∫°i nh√† h√†ng cho ch·ªß s·ªü h·ªØu
     */
    public void notifyRestaurantActivation(RestaurantProfile restaurant, String activatedBy, String activationReason) {
        try {
            User owner = restaurant.getOwner().getUser();
            
            // T·∫°o notification trong database
            Notification notification = new Notification();
            notification.setRecipientUserId(owner.getId());
            notification.setType(NotificationType.RESTAURANT_ACTIVATED);
            notification.setTitle("‚úÖ Nh√† h√†ng ƒë∆∞·ª£c k√≠ch ho·∫°t: " + restaurant.getRestaurantName());
            notification.setContent(String.format(
                "Ch√∫c m·ª´ng! Nh√† h√†ng \"%s\" c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t l·∫°i.\n\n" +
                "Ng∆∞·ªùi x·ª≠ l√Ω: %s\n" +
                "Th·ªùi gian: %s\n" +
                "%s\n\n" +
                "B·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c ho·∫°t ƒë·ªông v√† nh·∫≠n booking t·ª´ kh√°ch h√†ng.",
                restaurant.getRestaurantName(),
                activatedBy,
                LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm")),
                activationReason != null && !activationReason.trim().isEmpty() 
                    ? "L√Ω do: " + activationReason 
                    : "ƒê√£ kh·∫Øc ph·ª•c c√°c v·∫•n ƒë·ªÅ ƒë∆∞·ª£c y√™u c·∫ßu"
            ));
            notification.setLinkUrl("/restaurant/dashboard");
            notification.setPriority(1); // High priority
            notification.setPublishAt(LocalDateTime.now());
            notification.setExpireAt(LocalDateTime.now().plusDays(30)); // Expire after 30 days
            
            notificationRepository.save(notification);
            
            // G·ª≠i email cho ch·ªß nh√† h√†ng
            emailService.sendRestaurantApprovalEmail(
                owner.getEmail(),
                owner.getUsername(),
                restaurant.getRestaurantName(),
                "Nh√† h√†ng ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t l·∫°i: " + (activationReason != null ? activationReason : "ƒê√£ kh·∫Øc ph·ª•c c√°c v·∫•n ƒë·ªÅ")
            );
            
            logger.info("‚úÖ Restaurant activation notification sent to owner: {}", owner.getUsername());
            
        } catch (Exception e) {
            logger.error("‚ùå Failed to send restaurant activation notification", e);
        }
    }
}
