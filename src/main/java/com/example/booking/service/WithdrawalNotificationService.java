package com.example.booking.service;

import java.text.NumberFormat;
import java.util.Locale;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.booking.domain.Notification;
import com.example.booking.domain.NotificationStatus;
import com.example.booking.domain.NotificationType;
import com.example.booking.domain.WithdrawalRequest;
import com.example.booking.repository.NotificationRepository;

/**
 * Service ƒë·ªÉ g·ª≠i th√¥ng b√°o cho c√°c s·ª± ki·ªán withdrawal
 */
@Service
public class WithdrawalNotificationService {
    
    private static final Logger logger = LoggerFactory.getLogger(WithdrawalNotificationService.class);
    
    private final NotificationRepository notificationRepository;
    private final EmailService emailService;
    
    public WithdrawalNotificationService(
        NotificationRepository notificationRepository,
        EmailService emailService
    ) {
        this.notificationRepository = notificationRepository;
        this.emailService = emailService;
    }
    
    /**
     * G·ª≠i th√¥ng b√°o khi t·∫°o withdrawal request
     */
    @Transactional
    public void notifyWithdrawalCreated(WithdrawalRequest request) {
        try {
            String message = String.format(
                "Y√™u c·∫ßu r√∫t ti·ªÅn %s VNƒê ƒë√£ ƒë∆∞·ª£c t·∫°o v√† ƒëang ch·ªù admin duy·ªát",
                formatMoney(request.getAmount())
            );
            
            createNotification(
                request.getRestaurant().getOwner().getUser().getId(),
                NotificationType.PAYMENT_STATUS,
                "Y√™u c·∫ßu r√∫t ti·ªÅn ƒë√£ t·∫°o",
                message
            );
            
            logger.info("üìß Sent notification for withdrawal created: {}", request.getRequestId());
        } catch (Exception e) {
            logger.error("Failed to send withdrawal created notification", e);
        }
    }
    
    /**
     * G·ª≠i th√¥ng b√°o khi withdrawal ƒë∆∞·ª£c approve
     */
    @Transactional
    public void notifyWithdrawalApproved(WithdrawalRequest request) {
        try {
            String message = String.format(
                "Y√™u c·∫ßu r√∫t ti·ªÅn %s VNƒê ƒë√£ ƒë∆∞·ª£c duy·ªát v√† ƒëang x·ª≠ l√Ω chuy·ªÉn ti·ªÅn",
                formatMoney(request.getAmount())
            );
            
            createNotification(
                request.getRestaurant().getOwner().getUser().getId(),
                NotificationType.PAYMENT_STATUS,
                "Y√™u c·∫ßu r√∫t ti·ªÅn ƒë√£ ƒë∆∞·ª£c duy·ªát",
                message
            );
            
            logger.info("üìß Sent notification for withdrawal approved: {}", request.getRequestId());
        } catch (Exception e) {
            logger.error("Failed to send withdrawal approved notification", e);
        }
    }
    
    /**
     * G·ª≠i th√¥ng b√°o khi withdrawal b·ªã reject
     */
    @Transactional
    public void notifyWithdrawalRejected(WithdrawalRequest request) {
        try {
            String message = String.format(
                "Y√™u c·∫ßu r√∫t ti·ªÅn %s VNƒê ƒë√£ b·ªã t·ª´ ch·ªëi. L√Ω do: %s",
                formatMoney(request.getAmount()),
                request.getRejectionReason() != null ? request.getRejectionReason() : "Kh√¥ng r√µ"
            );
            
            createNotification(
                request.getRestaurant().getOwner().getUser().getId(),
                NotificationType.PAYMENT_STATUS,
                "Y√™u c·∫ßu r√∫t ti·ªÅn b·ªã t·ª´ ch·ªëi",
                message
            );
            
            // Send email
            String ownerEmail = request.getRestaurant().getOwner().getUser().getEmail();
            if (ownerEmail != null) {
                emailService.sendEmail(
                    ownerEmail,
                    "Y√™u c·∫ßu r√∫t ti·ªÅn b·ªã t·ª´ ch·ªëi",
                    buildRejectionEmailContent(request)
                );
            }
            
            logger.info("üìß Sent notification for withdrawal rejected: {}", request.getRequestId());
        } catch (Exception e) {
            logger.error("Failed to send withdrawal rejected notification", e);
        }
    }
    
    /**
     * G·ª≠i th√¥ng b√°o khi withdrawal th√†nh c√¥ng
     */
    @Transactional
    public void notifyWithdrawalSucceeded(WithdrawalRequest request) {
        try {
            String message = String.format(
                "ƒê√£ chuy·ªÉn %s VNƒê v√†o t√†i kho·∫£n %s. Vui l√≤ng ki·ªÉm tra s·ªë d∆∞ ng√¢n h√†ng",
                formatMoney(request.getAmount()),
                maskAccountNumber(request.getBankAccount().getAccountNumber())
            );
            
            createNotification(
                request.getRestaurant().getOwner().getUser().getId(),
                NotificationType.PAYMENT_STATUS,
                "R√∫t ti·ªÅn th√†nh c√¥ng",
                message
            );
            
            // Send email
            String ownerEmail = request.getRestaurant().getOwner().getUser().getEmail();
            if (ownerEmail != null) {
                emailService.sendEmail(
                    ownerEmail,
                    "R√∫t ti·ªÅn th√†nh c√¥ng",
                    buildSuccessEmailContent(request)
                );
            }
            
            logger.info("üìß Sent notification for withdrawal succeeded: {}", request.getRequestId());
        } catch (Exception e) {
            logger.error("Failed to send withdrawal succeeded notification", e);
        }
    }
    
    /**
     * G·ª≠i th√¥ng b√°o khi withdrawal failed
     */
    @Transactional
    public void notifyWithdrawalFailed(WithdrawalRequest request) {
        try {
            String message = String.format(
                "Giao d·ªãch r√∫t ti·ªÅn %s VNƒê th·∫•t b·∫°i. L√Ω do: %s. Vui l√≤ng li√™n h·ªá h·ªó tr·ª£",
                formatMoney(request.getAmount()),
                request.getRejectionReason() != null ? request.getRejectionReason() : "L·ªói h·ªá th·ªëng"
            );
            
            createNotification(
                request.getRestaurant().getOwner().getUser().getId(),
                NotificationType.PAYMENT_STATUS,
                "R√∫t ti·ªÅn th·∫•t b·∫°i",
                message
            );
            
            logger.info("üìß Sent notification for withdrawal failed: {}", request.getRequestId());
        } catch (Exception e) {
            logger.error("Failed to send withdrawal failed notification", e);
        }
    }
    
    /**
     * Create notification
     */
    private void createNotification(
        java.util.UUID userId,
        NotificationType type,
        String title,
        String content
    ) {
        Notification notification = new Notification();
        notification.setRecipientUserId(userId);
        notification.setType(type);
        notification.setContent(content);
        notification.setStatus(NotificationStatus.PENDING);
        
        notificationRepository.save(notification);
    }
    
    /**
     * Format money
     */
    private String formatMoney(java.math.BigDecimal amount) {
        NumberFormat formatter = NumberFormat.getInstance(new Locale("vi", "VN"));
        return formatter.format(amount);
    }
    
    /**
     * Mask account number
     */
    private String maskAccountNumber(String accountNumber) {
        if (accountNumber == null || accountNumber.length() < 6) {
            return "***";
        }
        int len = accountNumber.length();
        return accountNumber.substring(0, 3) + "****" + accountNumber.substring(len - 3);
    }
    
    /**
     * Build rejection email content
     */
    private String buildRejectionEmailContent(WithdrawalRequest request) {
        return String.format(
            "K√≠nh g·ª≠i %s,\n\n" +
            "Y√™u c·∫ßu r√∫t ti·ªÅn #%d c·ªßa qu√Ω kh√°ch ƒë√£ b·ªã t·ª´ ch·ªëi.\n\n" +
            "S·ªë ti·ªÅn: %s VNƒê\n" +
            "L√Ω do: %s\n\n" +
            "Vui l√≤ng li√™n h·ªá b·ªô ph·∫≠n h·ªó tr·ª£ n·∫øu c·∫ßn th√™m th√¥ng tin.\n\n" +
            "Tr√¢n tr·ªçng,\n" +
            "Restaurant Booking System",
            request.getRestaurant().getRestaurantName(),
            request.getRequestId(),
            formatMoney(request.getAmount()),
            request.getRejectionReason()
        );
    }
    
    /**
     * Build success email content
     */
    private String buildSuccessEmailContent(WithdrawalRequest request) {
        return String.format(
            "K√≠nh g·ª≠i %s,\n\n" +
            "Y√™u c·∫ßu r√∫t ti·ªÅn #%d c·ªßa qu√Ω kh√°ch ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng.\n\n" +
            "S·ªë ti·ªÅn: %s VNƒê\n" +
            "T√†i kho·∫£n nh·∫≠n: %s - %s\n" +
            "Ng√¢n h√†ng: %s\n\n" +
            "Vui l√≤ng ki·ªÉm tra s·ªë d∆∞ t√†i kho·∫£n ng√¢n h√†ng c·ªßa qu√Ω kh√°ch.\n\n" +
            "Tr√¢n tr·ªçng,\n" +
            "Restaurant Booking System",
            request.getRestaurant().getRestaurantName(),
            request.getRequestId(),
            formatMoney(request.getAmount()),
            maskAccountNumber(request.getBankAccount().getAccountNumber()),
            request.getBankAccount().getAccountHolderName(),
            request.getBankAccount().getBankName()
        );
    }
}

