package com.example.booking.service;

import com.example.booking.domain.Payment;
import com.example.booking.domain.PaymentStatus;
import com.example.booking.repository.PaymentRepository;
import com.example.booking.web.dto.PayOSRefundRequest;
import com.example.booking.web.dto.PayOSRefundResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * Service x·ª≠ l√Ω ho√†n ti·ªÅn cho c√°c payment methods
 */
@Service
@Transactional
public class RefundService {
    
    private static final Logger logger = LoggerFactory.getLogger(RefundService.class);
    
    @Autowired
    private PaymentRepository paymentRepository;
    
    @Autowired
    private PayOsService payOsService;
    
    @Autowired
    private EnhancedRefundService enhancedRefundService;
    
    /**
     * Ho√†n ti·ªÅn cho m·ªôt payment v·ªõi logic m·ªõi:
     * - Tr·ª´ 30% hoa h·ªìng t·ª´ v√≠ nh√† h√†ng
     * - Admin chuy·ªÉn ti·ªÅn cho kh√°ch h√†ng
     * - Th√¥ng b√°o kh√°ch h√†ng v·ªÅ th·ªùi gian ho√†n ti·ªÅn (1-3 ng√†y)
     * @param paymentId ID c·ªßa payment c·∫ßn ho√†n ti·ªÅn
     * @param refundAmount S·ªë ti·ªÅn ho√†n (null = ho√†n to√†n b·ªô)
     * @param reason L√Ω do ho√†n ti·ªÅn
     * @return Payment ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
     */
    public Payment processRefund(Integer paymentId, BigDecimal refundAmount, String reason) {
        // S·ª≠ d·ª•ng EnhancedRefundService v·ªõi logic m·ªõi
        return enhancedRefundService.processRefundWithCommissionDeduction(paymentId, refundAmount, reason);
    }
    
    /**
     * X·ª≠ l√Ω ho√†n ti·ªÅn PayOS
     */
    private boolean processPayOSRefund(Payment payment, BigDecimal refundAmount, String reason) {
        try {
            logger.info("üîÑ Processing PayOS refund for orderCode: {}, amount: {}", 
                       payment.getOrderCode(), refundAmount);
            
            // Validate orderCode
            if (payment.getOrderCode() == null) {
                throw new IllegalStateException("Payment orderCode is null");
            }
            
            // Create refund request
            PayOSRefundRequest refundRequest = new PayOSRefundRequest();
            refundRequest.setOrderCode(payment.getOrderCode());
            refundRequest.setAmount(refundAmount.longValue());
            refundRequest.setReason(reason);
            
            // Call PayOS refund API
            PayOSRefundResponse refundResponse = payOsService.processRefund(refundRequest);
            
            if (refundResponse != null && refundResponse.getCode() == 0) {
                logger.info("‚úÖ PayOS refund successful: {}", refundResponse.getDesc());
                return true;
            } else {
                logger.error("‚ùå PayOS refund failed: {}", 
                           refundResponse != null ? refundResponse.getDesc() : "Unknown error");
                return false;
            }
            
        } catch (Exception e) {
            logger.error("‚ùå Error processing PayOS refund", e);
            return false;
        }
    }
    
    /**
     * L·∫•y danh s√°ch payments c√≥ th·ªÉ ho√†n ti·ªÅn
     */
    public List<Payment> getRefundablePayments() {
        return paymentRepository.findPaymentsEligibleForRefund();
    }
    
    /**
     * Ho√†n ti·ªÅn to√†n b·ªô cho m·ªôt payment
     */
    public Payment processFullRefund(Integer paymentId, String reason) {
        return processRefund(paymentId, null, reason);
    }
    
    /**
     * Ho√†n ti·ªÅn m·ªôt ph·∫ßn cho m·ªôt payment
     */
    public Payment processPartialRefund(Integer paymentId, BigDecimal refundAmount, String reason) {
        return processRefund(paymentId, refundAmount, reason);
    }
    
    /**
     * L·∫•y th√¥ng tin refund c·ªßa m·ªôt payment
     */
    public Optional<Payment> getRefundInfo(Integer paymentId) {
        return paymentRepository.findById(paymentId)
            .filter(payment -> payment.getRefundedAt() != null);
    }
    
    /**
     * Ki·ªÉm tra xem payment c√≥ th·ªÉ ho√†n ti·ªÅn kh√¥ng
     */
    public boolean canRefund(Integer paymentId) {
        return paymentRepository.findById(paymentId)
            .map(payment -> payment.getStatus() == PaymentStatus.COMPLETED && 
                           payment.getRefundedAt() == null)
            .orElse(false);
    }
}
