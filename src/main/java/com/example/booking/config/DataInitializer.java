package com.example.booking.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import com.example.booking.domain.DiningTable;
import com.example.booking.domain.Restaurant;
import com.example.booking.repository.DiningTableRepository;
import com.example.booking.repository.RestaurantRepository;

@Component
public class DataInitializer implements CommandLineRunner {

    private final RestaurantRepository restaurantRepository;
    private final DiningTableRepository diningTableRepository;

    @Autowired
    public DataInitializer(RestaurantRepository restaurantRepository,
                          DiningTableRepository diningTableRepository) {
        this.restaurantRepository = restaurantRepository;
        this.diningTableRepository = diningTableRepository;
    }

    @Override
    public void run(String... args) throws Exception {
        if (restaurantRepository.count() == 0) {
            initializeData();
        } else {
            System.out.println("‚úÖ Database already contains sample data!");
            System.out.println("üìç Found " + restaurantRepository.count() + " restaurants");
            System.out.println("ü™ë Found " + diningTableRepository.count() + " dining tables");
        }
    }

    private void initializeData() {
        // Create restaurants
        Restaurant restaurant1 = new Restaurant(
                "Nh√† h√†ng S√†i G√≤n",
                "Nh√† h√†ng ph·ª•c v·ª• c√°c m√≥n ƒÉn truy·ªÅn th·ªëng Vi·ªát Nam v·ªõi kh√¥ng gian ·∫•m c√∫ng",
                "123 Nguy·ªÖn Hu·ªá, Qu·∫≠n 1, TP.HCM",
                "028-1234-5678"
        );

        Restaurant restaurant2 = new Restaurant(
                "Golden Dragon",
                "Nh√† h√†ng Trung Hoa cao c·∫•p v·ªõi c√°c m√≥n ƒÉn ƒë·∫∑c s·∫Øc",
                "456 L√™ L·ª£i, Qu·∫≠n 1, TP.HCM",
                "028-9876-5432"
        );

        Restaurant restaurant3 = new Restaurant(
                "Bistro Fran√ßais",
                "Nh√† h√†ng Ph√°p sang tr·ªçng v·ªõi phong c√°ch ch√¢u √Çu",
                "789 ƒê·ªìng Kh·ªüi, Qu·∫≠n 1, TP.HCM",
                "028-1111-2222"
        );

        // Save restaurants
        restaurant1 = restaurantRepository.save(restaurant1);
        restaurant2 = restaurantRepository.save(restaurant2);
        restaurant3 = restaurantRepository.save(restaurant3);

        // Create tables for Restaurant 1
        diningTableRepository.save(new DiningTable(restaurant1, "B√†n A1", 2, "B√†n 2 ng∆∞·ªùi g·∫ßn c·ª≠a s·ªï"));
        diningTableRepository.save(new DiningTable(restaurant1, "B√†n A2", 4, "B√†n 4 ng∆∞·ªùi ·ªü khu v·ª±c ch√≠nh"));
        diningTableRepository.save(new DiningTable(restaurant1, "B√†n A3", 6, "B√†n 6 ng∆∞·ªùi ph√π h·ª£p cho gia ƒë√¨nh"));
        diningTableRepository.save(new DiningTable(restaurant1, "B√†n VIP", 8, "B√†n VIP ri√™ng t∆∞"));

        // Create tables for Restaurant 2
        diningTableRepository.save(new DiningTable(restaurant2, "Dragon 1", 4, "B√†n tr√≤n truy·ªÅn th·ªëng"));
        diningTableRepository.save(new DiningTable(restaurant2, "Dragon 2", 6, "B√†n tr√≤n l·ªõn"));
        diningTableRepository.save(new DiningTable(restaurant2, "Dragon 3", 8, "B√†n tr√≤n cho nh√≥m ƒë√¥ng"));
        diningTableRepository.save(new DiningTable(restaurant2, "Private Room", 12, "Ph√≤ng ri√™ng cao c·∫•p"));

        // Create tables for Restaurant 3
        diningTableRepository.save(new DiningTable(restaurant3, "Table 1", 2, "Intimate table for two"));
        diningTableRepository.save(new DiningTable(restaurant3, "Table 2", 4, "Standard table"));
        diningTableRepository.save(new DiningTable(restaurant3, "Table 3", 6, "Family table"));
        diningTableRepository.save(new DiningTable(restaurant3, "Terrace", 4, "Outdoor terrace seating"));

        System.out.println("‚úÖ Sample data initialized successfully!");
        System.out.println("üìç Created " + restaurantRepository.count() + " restaurants");
        System.out.println("ü™ë Created " + diningTableRepository.count() + " dining tables");
    }
} 