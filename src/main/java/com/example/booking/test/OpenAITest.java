package com.example.booking.test;

import java.time.Duration;
import java.util.List;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import com.theokanning.openai.completion.chat.ChatCompletionRequest;
import com.theokanning.openai.completion.chat.ChatMessage;
import com.theokanning.openai.completion.chat.ChatMessageRole;
import com.theokanning.openai.service.OpenAiService;

/**
 * Simple OpenAI API Key Test
 */
@Component
public class OpenAITest {
    
    @Value("${ai.openai.api-key}")
    private String apiKey;
    
    @Value("${ai.openai.model:gpt-4o-mini}")
    private String model;
    
    /**
     * Test OpenAI API key
     */
    public void testOpenAIKey() {
        System.out.println("üîë Testing OpenAI API Key...");
        System.out.println("API Key: " + (apiKey != null && !apiKey.isEmpty() ? 
            apiKey.substring(0, Math.min(10, apiKey.length())) + "..." : "NOT SET"));
        System.out.println("Model: " + model);
        
        try {
            // Create OpenAI service
            OpenAiService service = new OpenAiService(apiKey, Duration.ofSeconds(30));
            
            // Simple test request
            ChatCompletionRequest request = ChatCompletionRequest.builder()
                .model(model)
                .messages(List.of(
                    new ChatMessage(ChatMessageRole.USER.value(), "Hello, are you working?")
                ))
                .maxTokens(50)
                .temperature(0.1)
                .build();
            
            System.out.println("üì° Sending test request to OpenAI...");
            
            // Make request
            String response = service.createChatCompletion(request)
                .getChoices().get(0).getMessage().getContent();
            
            System.out.println("‚úÖ OpenAI API Key is working!");
            System.out.println("Response: " + response);
            
        } catch (Exception e) {
            System.err.println("‚ùå OpenAI API Key test failed!");
            System.err.println("Error: " + e.getMessage());
            
            if (e.getMessage().contains("401")) {
                System.err.println("üí° Issue: Invalid API key");
            } else if (e.getMessage().contains("429")) {
                System.err.println("üí° Issue: Rate limit exceeded");
            } else if (e.getMessage().contains("timeout")) {
                System.err.println("üí° Issue: Network timeout");
            } else {
                System.err.println("üí° Issue: " + e.getClass().getSimpleName());
            }
        }
    }
    
    /**
     * Test restaurant search intent parsing
     */
    public void testRestaurantIntentParsing() {
        System.out.println("\nüçΩÔ∏è Testing Restaurant Intent Parsing...");
        
        try {
            OpenAiService service = new OpenAiService(apiKey, Duration.ofSeconds(30));
            
            String systemPrompt = """
                B·∫°n l√† AI chuy√™n ph√¢n t√≠ch √Ω ƒë·ªãnh t√¨m ki·∫øm nh√† h√†ng.
                Ph√¢n t√≠ch c√¢u h·ªèi v√† tr·∫£ v·ªÅ JSON v·ªõi c√°c tr∆∞·ªùng:
                - cuisine: danh s√°ch lo·∫°i ·∫©m th·ª±c
                - party_size: s·ªë ng∆∞·ªùi
                - price_range: kho·∫£ng gi√° (min, max)
                - distance: kho·∫£ng c√°ch km
                - dietary: y√™u c·∫ßu ƒÉn u·ªëng ƒë·∫∑c bi·ªát
                """;
            
            String userPrompt = "T√¥i mu·ªën ƒÉn sushi g·∫ßn ƒë√¢y v·ªõi 2 ng∆∞·ªùi, gi√° kho·∫£ng 200k-500k";
            
            ChatCompletionRequest request = ChatCompletionRequest.builder()
                .model(model)
                .messages(List.of(
                    new ChatMessage(ChatMessageRole.SYSTEM.value(), systemPrompt),
                    new ChatMessage(ChatMessageRole.USER.value(), userPrompt)
                ))
                .maxTokens(200)
                .temperature(0.3)
                .build();
            
            System.out.println("üì° Testing intent parsing...");
            
            String response = service.createChatCompletion(request)
                .getChoices().get(0).getMessage().getContent();
            
            System.out.println("‚úÖ Intent parsing test successful!");
            System.out.println("Response: " + response);
            
        } catch (Exception e) {
            System.err.println("‚ùå Intent parsing test failed!");
            System.err.println("Error: " + e.getMessage());
        }
    }
}
