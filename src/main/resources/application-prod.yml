spring:
  datasource:
    # Luôn bind vào DATABASE_URL, fallback JDBC_DATABASE_URL khi chạy local
    url: ${DATABASE_URL:${JDBC_DATABASE_URL:jdbc:postgresql://localhost:5432/bookeat_db}}
    driver-class-name: org.postgresql.Driver
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:password}

  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
    show-sql: false
    # Tối ưu hiệu năng production
    open-in-view: false

  # Email configuration for production
  mail:
    host: ${SPRING_MAIL_HOST:${MAIL_HOST:smtp.gmail.com}}
    port: ${SPRING_MAIL_PORT:${MAIL_PORT:587}}
    username: ${MAIL_USERNAME:${SPRING_MAIL_USERNAME:}}
    password: ${MAIL_PASSWORD:${SPRING_MAIL_PASSWORD:}}
    properties:
      mail.smtp.auth: true
      mail.smtp.starttls.enable: true

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope: [openid, email, profile]
            redirect-uri: ${APP_BASE_URL}/login/oauth2/code/google

# Application configuration
app:
  base-url: ${APP_BASE_URL:https://your-app.onrender.com}
  upload:
    dir: ${UPLOAD_DIR:/tmp/uploads}
    max-file-size: 5MB
    max-request-size: 5MB

# Payment configuration
payment:
  payos:
    client-id: ${PAYOS_CLIENT_ID}
    api-key: ${PAYOS_API_KEY}
    checksum-key: ${PAYOS_CHECKSUM_KEY}
    endpoint: ${PAYOS_ENDPOINT:https://api-merchant.payos.vn}
    return-url: ${APP_BASE_URL}/payment/payos/return
    cancel-url: ${APP_BASE_URL}/payment/payos/cancel
    webhook-url: ${APP_BASE_URL}/payment/api/payos/webhook

# AI Server Configuration for Production
ai:
  server:
    url: ${AI_SERVER_URL:https://restaurant-chatbot-service.onrender.com}
    timeout: ${AI_SERVER_TIMEOUT:60000}

# Cloudinary Configuration - với fallback để tránh lỗi khi không có config
cloudinary:
  cloud-name: ${CLOUDINARY_CLOUD_NAME:}
  api-key: ${CLOUDINARY_API_KEY:}
  api-secret: ${CLOUDINARY_API_SECRET:}
  secure: ${CLOUDINARY_SECURE:true}
  # Tắt Cloudinary nếu không có config
  enabled: ${CLOUDINARY_ENABLED:false}

# Logging for production - tối ưu startup time
logging:
  level:
    org.hibernate.SQL: WARN
    org.springframework.security: WARN
    com.example.booking: INFO
    org.springframework.web: WARN
    org.springframework.boot: WARN
    org.springframework.context: WARN
    # Giảm log noise
    org.springframework.boot.autoconfigure: ERROR
    org.springframework.boot.context: ERROR
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
  # Tắt file logging để tăng tốc
  file:
    enabled: false

# Server configuration - Luôn bind vào cổng do Render cấp, fallback 8080 khi chạy local
server:
  port: ${PORT:8080}
  error:
    include-message: never
    include-binding-errors: never
  # Tối ưu startup time
  tomcat:
    threads:
      max: 200
      min-spare: 10
    connection-timeout: 20000

# Management endpoints for health check - chỉ expose health và info
management:
  endpoints:
    web:
      exposure:
        include: health,info
      base-path: /actuator
  endpoint:
    health:
      show-details: never
      show-components: never
    info:
      enabled: true
  # Tối ưu startup
  health:
    defaults:
      enabled: true
    diskspace:
      enabled: false 